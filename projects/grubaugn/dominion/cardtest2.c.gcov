        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtestvillage: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtestvillage -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:
        1:   20:int main() {
        -:   21:    int ret;
        1:   22:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:    int seed = 15;
        -:   24:    int numPlayers, player;
        -:   25:	struct gameState G, post;
        1:   26:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   27:			sea_hag, tribute, smithy, council_room};
        -:   28:	
        1:   29:	int h[5] = {village, copper, copper, estate, estate};
        1:   30:	int d[5] = {copper, copper, copper, copper, copper};
        1:   31:	int expect[5] = {copper, copper, copper, estate, estate};
        -:   32:
        1:   33:	printf("Testing Card: Village\n");
        -:   34:
        4:   35:	for (numPlayers = 2; numPlayers < 5; numPlayers++) {	//testing 2-4 player games
        3:   36:		memset(&G, 23, sizeof(struct gameState));		//clear the game
        3:   37:		memset(&post, 23, sizeof(struct gameState));	//clear the post
        -:   38:		
        -:   39:#if (NOISY_TEST == 1)			
        3:   40:		printf("Initializing Game with %d players\n", numPlayers);
        -:   41:#endif
        -:   42:
        3:   43:		initializeGame(numPlayers, k, seed, &G);
        -:   44:			
       12:   45:		for(player = 0; player < numPlayers; player++) {		//testing each player in game
        -:   46:#if (NOISY_TEST == 1)		
        9:   47:			printf("Testing Player %d\n", player);
        -:   48:#endif			
        -:   49:			//cards can be shuffled differently, so drawn cards might not be the same for each instance of the game
        -:   50:			//thus all the cards in the deck were made coppers.	
        9:   51:			memcpy(G.hand[player], h, sizeof(int) * 5); //set all cards to test hand h
        9:   52:			memcpy(G.deck[player], d, sizeof(int) * 5); //set all cards to test deck d
        9:   53:			G.deckCount[player] = 5;
        9:   54:			G.handCount[player] = 5;
        9:   55:			G.whoseTurn = player;		//smithy card expects that the player is playing it on their turn
        -:   56:			
        9:   57:			memcpy(&post, &G, sizeof(struct gameState)); //save G
        -:   58:
        9:   59:			cardEffect(village, choice1, choice2, choice3, &post, handpos, &bonus);
        -:   60:#if (NOISY_TEST == 1)			
        9:   61:			printf("   Checking hand count: \n");
        9:   62:			printf("      Hand count: %d Expected: %d\n", post.handCount[player], G.handCount[player]);		//hand count should still be 5 (+1 - 1)
        9:   63:			printf("      If this test doesn't work, then the next one won't either\n");
        9:   64:			printf("   Checking correct card was discarded: \n");
        -:   65:#endif
        -:   66:			
        9:   67:			ret = memcmp(post.hand[player], expect, sizeof(int) * post.handCount[player]);
        -:   68:			
        -:   69:#if (NOISY_TEST == 1)		
        9:   70:			printf("      Comparison: %d Expected: 0\n", ret);
        9:   71:			printf("   Checking number of actions: \n");
        -:   72:			//when playing a card, the number of actions is reduced in another function outside of cardeffect, thus num of actions should be 1 + 2
        9:   73:			printf("      Actions: %d Expected: 3\n", post.numActions);
        -:   74:#endif
        -:   75:
        -:   76:		}
        -:   77:	}
        1:   78:		printf("All tests Conducted!\n");
        -:   79:
        1:   80:	return 0;
        -:   81:}
