        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * testdiscardCard: unittest1.c dominion.o rngs.o
        -:    5: *      gcc -o testdiscardCard -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8: 
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:#define NOISY_TEST 1
        -:   17:
        1:   18:int main() {
        -:   19:	int i, j;
        1:   20:	int seed = 15;
        1:   21:	int numPlayer = 2;
        -:   22:	int player, r;
        1:   23:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   24:	int h[5] = {copper, copper, copper, estate, estate};
        -:   25:	
        -:   26:	struct gameState G;
        -:   27:	struct gameState post;
        -:   28:	
        1:   29:	printf ("TESTING discardCard():\n");
        1:   30:	printf ("Testing regular operations\n");
        -:   31:	
        4:   32:	for (numPlayer = 2; numPlayer < 5; numPlayer++) {		//test 2 - 4 players
        3:   33:		memset(&G, 23, sizeof(struct gameState));		//clear the game
        3:   34:		memset(&post, 23, sizeof(struct gameState));	//clear the post
        -:   35:		
        -:   36:#if (NOISY_TEST == 1)			
        3:   37:		printf("Initializing Game with %d players\n", numPlayer);
        -:   38:#endif
        -:   39:
        3:   40:		r = initializeGame(numPlayer, k, seed, &G);		//new game		
        -:   41:		
       12:   42:		for (player = 0; player < numPlayer; player++) {	//go through each player in this instance
        -:   43:			
        -:   44:#if (NOISY_TEST == 1)
        9:   45:			printf("Testing Player %d\n", player);
        -:   46:#endif
        -:   47:			
       54:   48:			for (i = 0; i < 5; i++) {					//test each hand position
        -:   49:#if (NOISY_TEST == 1)				
       45:   50:				printf("   Testing Hand Position %d \n", i);
        -:   51:#endif				
       45:   52:				memcpy(G.hand[player], h, sizeof(int) * 5); //set all cards to test hand h
       45:   53:				G.handCount[player] = 5;
       45:   54:				memcpy(&post, &G, sizeof(struct gameState));	//Save G
        -:   55:				
       45:   56:				discardCard(i, player, &post, 0);
        -:   57:				
       45:   58:				G.hand[player][i] = G.hand[player][ (G.handCount[player] - 1)];
       45:   59:				G.hand[player][G.handCount[player] - 1] = -1;
       45:   60:				G.handCount[player]--;
       45:   61:				G.playedCardCount++;
        -:   62:				
       45:   63:				assert(post.playedCardCount == G.playedCardCount);
        -:   64:#if (NOISY_TEST == 1)					
       45:   65:				printf("      Successful Discard!\n");
        -:   66:#endif				
      225:   67:				for(j = 0; j < 4; j++) {
      180:   68:					assert(post.hand[player][j] == G.hand[player][j]);
        -:   69:				}
        -:   70:				
        -:   71:			}
        -:   72:		}			
        -:   73:	}
        -:   74:	
        1:   75:	printf("Testing one card in hand\n");
        -:   76:	
        1:   77:	memset(&G, 23, sizeof(struct gameState));		//clear the game
        1:   78:	memset(&post, 23, sizeof(struct gameState));	//clear the post
        1:   79:	r = initializeGame(2, k, seed, &G);
        -:   80:	
        1:   81:	G.hand[1][0] = copper;
        1:   82:	G.handCount[1] = 1;
        -:   83:	
        1:   84:	memcpy(&post, &G, sizeof(struct gameState));	//Save G
        -:   85:	
        1:   86:	discardCard(0, 1, &post, 0);
        -:   87:	
        1:   88:	G.handCount[1]--;
        -:   89:	
        1:   90:	assert(post.handCount[1] == G.handCount[1]);
        -:   91:	
        1:   92:	printf("Testing card is trashed (not played)\n");
        -:   93:	
        1:   94:	memset(&G, 23, sizeof(struct gameState));		//clear the game
        1:   95:	memset(&post, 23, sizeof(struct gameState));	//clear the post
        1:   96:	r = initializeGame(2, k, seed, &G);
        -:   97:	
        1:   98:	G.hand[1][0] = copper;
        1:   99:	G.handCount[1] = 1;
        -:  100:	
        1:  101:	memcpy(&post, &G, sizeof(struct gameState));	//Save G
        -:  102:	
        1:  103:	discardCard(0, 1, &post, 1);
        -:  104:	
        1:  105:	G.handCount[1]--;
        -:  106:	
        1:  107:	assert(post.handCount[1] == G.handCount[1]);
        1:  108:	assert(post.playedCardCount == 0);	
        -:  109:	
        1:  110:	printf("All tests Successful!\n");
        1:  111:	return 0;
        -:  112:}
