        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     8415:    8:int compare(const void* a, const void* b) {
     8415:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     8415:   11:  if (*(int*)a < *(int*)b)
     2244:   12:    return -1;
     6171:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      190:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      190:   44:  SelectStream(1);
      190:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      190:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      189:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2079:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    20790:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    18900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      189:   73:  if (numPlayers == 2)
        -:   74:    {
       67:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      122:   77:  else if (numPlayers == 3)
        -:   78:    {
       61:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       61:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      189:   87:  if (numPlayers == 2)
        -:   88:    {
       67:   89:      state->supplyCount[estate] = 8;
       67:   90:      state->supplyCount[duchy] = 8;
       67:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      122:   95:      state->supplyCount[estate] = 12;
      122:   96:      state->supplyCount[duchy] = 12;
      122:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      189:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      189:  102:  state->supplyCount[silver] = 40;
      189:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3969:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
    31185:  108:	for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    29295:  110:		if (kingdomCards[j] == i)
        -:  111:		{
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1890:  113:			if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:			{
       76:  115:				if (numPlayers == 2){ 
       18:  116:					state->supplyCount[i] = 8; 
        -:  117:				}
       20:  118:				else{ state->supplyCount[i] = 12; }
        -:  119:			}
        -:  120:			else
        -:  121:			{
     1852:  122:				state->supplyCount[i] = 10;
        -:  123:			}
     1890:  124:			break;
        -:  125:		}
        -:  126:		else    //card is not in the set choosen for the game
        -:  127:	    {
    27405:  128:			state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      750:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      561:  140:      state->deckCount[i] = 0;
     2244:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1683:  143:	  state->deck[i][j] = estate;
     1683:  144:	  state->deckCount[i]++;
        -:  145:	}
     4488:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3927:  148:	  state->deck[i][j] = copper;
     3927:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      750:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      561:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      750:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      561:  166:      state->handCount[i] = 0;
      561:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     5292:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     5103:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      189:  182:  state->outpostPlayed = 0;
      189:  183:  state->phase = 0;
      189:  184:  state->numActions = 1;
      189:  185:  state->numBuys = 1;
      189:  186:  state->playedCardCount = 0;
      189:  187:  state->whoseTurn = 0;
      189:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1134:  192:  for (it = 0; it < 5; it++){
      945:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      189:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      189:  198:  return 0;
        -:  199:}
        -:  200:
      561:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      561:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      561:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      561:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6732:  214:  while (state->deckCount[player] > 0) {
     5610:  215:    card = floor(Random() * state->deckCount[player]);
     5610:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5610:  217:    newDeckPos++;
    19214:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    13604:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5610:  221:    state->deckCount[player]--;
        -:  222:  }
     6171:  223:  for (i = 0; i < newDeckPos; i++) {
     5610:  224:    state->deck[player][i] = newDeck[i];
     5610:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      561:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      713:  320:int supplyCount(int card, struct gameState *state) {
      713:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      508:  346:int whoseTurn(struct gameState *state) {
      508:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
       60:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       60:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       57:  401:  j = 0;
     1482:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     1425:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      126:  406:	  j++;
        -:  407:	}
        -:  408:    }
       57:  409:  if ( j >= 3)
        -:  410:    {
       24:  411:      return 1;
        -:  412:    }
        -:  413:
       33:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     1089:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1089:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1089:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1089:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1089:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1089:  576:    state->deckCount[player]--;
     1089:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1089:  580:  return 0;
        -:  581:}
        -:  582:
     1252:  583:int getCost(int cardNumber)
        -:  584:{
     1252:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
       37:  588:      return 0;
        -:  589:    case estate:
       37:  590:      return 2;
        -:  591:    case duchy:
       37:  592:      return 5;
        -:  593:    case province:
       37:  594:      return 8;
        -:  595:    case copper:
      241:  596:      return 0;
        -:  597:    case silver:
      241:  598:      return 3;
        -:  599:    case gold:
      241:  600:      return 6;
        -:  601:    case adventurer:
       37:  602:      return 6;
        -:  603:    case council_room:
       37:  604:      return 5;
        -:  605:    case feast:
       37:  606:      return 4;
        -:  607:    case gardens:
       37:  608:      return 4;
        -:  609:    case mine:
       37:  610:      return 5;
        -:  611:    case remodel:
       37:  612:      return 4;
        -:  613:    case smithy:
       37:  614:      return 4;
        -:  615:    case village:
       37:  616:      return 3;
        -:  617:    case baron:
       37:  618:      return 4;
        -:  619:    case great_hall:
       37:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
       27:  646:int adventurerfunc(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand)
        -:  647:{
       27:  648:	int z = 0; //<- correct version
        -:  649:	//int z; // <- bugged version
        -:  650:	
      162:  651:	while(drawntreasure<2)
        -:  652:	{
      108:  653:		if (state->deckCount[currentPlayer] <1)
        -:  654:		{//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      108:  657:		drawCard(currentPlayer, state);
      108:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      108:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       54:  660:			drawntreasure++;
        -:  661:		else
        -:  662:		{
       54:  663:			temphand[z]=cardDrawn;
       54:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       54:  665:			z++;
        -:  666:		}
        -:  667:    }
      108:  668:    while(z-1>=0){
       54:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       54:  670:		z=z-1;
        -:  671:    }
       27:  672:    return 0;
        -:  673:}
        -:  674:
        9:  675:int smithyfunc(int currentPlayer, struct gameState *state, int handPos)
        -:  676:{
        -:  677:	int i;
        -:  678:
        -:  679:	//+3 Cards
       36:  680:    for (i = 0; i < 3; i++)
        -:  681:	{
       27:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:	
        9:  685:	handPos++; //Introduced Bug. Causes wrong card to be discarded. To fix, delete this line.
        -:  686:	
        -:  687:    //discard card from hand
        9:  688:    discardCard(handPos, currentPlayer, state, 0);
        9:  689:    return 0;
        -:  690:}
        -:  691:
        9:  692:int villagefunc(int currentPlayer, struct gameState *state, int handPos)
        -:  693:{
        -:  694:	//+1 Card
        9:  695:	drawCard(currentPlayer, state);
        -:  696:			
        -:  697:	//+2 Actions
        -:  698:	//state->numActions = state->numActions + 2; // <- Correct Version
        -:  699:	
        -:  700:	//Bugged code, only gives +1 Action
        9:  701:	state->numActions = state->numActions + 1; // <- Bugged Version
        -:  702:			
        -:  703:	//discard played card from hand
        9:  704:	discardCard(handPos, currentPlayer, state, 0);
        9:  705:    return 0;
        -:  706:}
        -:  707:
      463:  708:int minefunc(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  709:{
        -:  710:	int i;
        -:  711:	int j;
        -:  712:	
      463:  713:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  714:
      463:  715:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  716:	{
        2:  717:		return -1;
        -:  718:	}
        -:  719:		
      461:  720:    if (choice2 > treasure_map || choice2 < curse)
        -:  721:	{
        2:  722:		return -1;
        -:  723:	}
        -:  724:
        -:  725:    /*if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  726:	{
        -:  727:		return -1;
        -:  728:	}*/ // <-Correct code
        -:  729:	
      459:  730:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  731:	{
      261:  732:		return -1;
        -:  733:	} // <-Bugged Code
        -:  734:
      198:  735:    gainCard(choice2, state, 2, currentPlayer);
        -:  736:
        -:  737:    //discard card from hand
      198:  738:    discardCard(handPos, currentPlayer, state, 0);
        -:  739:
        -:  740:    //discard trashed card
      468:  741:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  742:	{
      468:  743:		if (state->hand[currentPlayer][i] == j)
        -:  744:	    {
      198:  745:			discardCard(i, currentPlayer, state, 0);			
      198:  746:			break;
        -:  747:	    }
        -:  748:	}
        -:  749:			
      198:  750:    return 0;				
        -:  751:}
        -:  752:
    #####:  753:int council_roomfunc(int currentPlayer, struct gameState *state, int handPos)
        -:  754:{
        -:  755:	int i;
        -:  756:	//+4 Cards
    #####:  757:    for (i = 0; i < 4; i++)
        -:  758:	{
    #####:  759:		drawCard(currentPlayer, state);
        -:  760:	}
        -:  761:			
        -:  762:    //+1 Buy
    #####:  763:    state->numBuys++;
        -:  764:			
        -:  765:    //Each other player draws a card
    #####:  766:    for (i = 0; i < state->numPlayers; i++)
        -:  767:	{
    #####:  768:		if ( i != currentPlayer )
        -:  769:	    {
    #####:  770:			drawCard(i, state);
        -:  771:	    }
        -:  772:	}
        -:  773:			
        -:  774:    //put played card in played card pile
    #####:  775:    discardCard(handPos, currentPlayer, state, 0);
        -:  776:			
    #####:  777:    return 0;
        -:  778:}
        -:  779:
      508:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
        -:  782:  int i;
        -:  783:  int j;
        -:  784:  int k;
        -:  785:  int x;
        -:  786:  int index;
      508:  787:  int currentPlayer = whoseTurn(state);
      508:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
      508:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
      508:  792:  int drawntreasure=0;
      508:  793:  int cardDrawn = 0;
      508:  794:  int z = 0;// this is the counter for the temp hand
      508:  795:  if (nextPlayer > (state->numPlayers - 1)){
      170:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
      508:  801:  switch( card ) 
        -:  802:    {
        -:  803:    case adventurer:
        -:  804:	/*	while(drawntreasure<2)
        -:  805:		{
        -:  806:			if (state->deckCount[currentPlayer] <1)
        -:  807:			{//if the deck is empty we need to shuffle discard and add to deck
        -:  808:				shuffle(currentPlayer, state);
        -:  809:			}
        -:  810:			drawCard(currentPlayer, state);
        -:  811:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  812:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  813:				drawntreasure++;
        -:  814:			else
        -:  815:			{
        -:  816:				temphand[z]=cardDrawn;
        -:  817:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  818:				z++;
        -:  819:			}
        -:  820:		}
        -:  821:		while(z-1>=0)
        -:  822:		{
        -:  823:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  824:			z=z-1;
        -:  825:		}
        -:  826:		return 0; */
        -:  827:	
       27:  828:		return adventurerfunc(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  829:	
        -:  830:    case council_room:
        -:  831:    /*  //+4 Cards
        -:  832:      for (i = 0; i < 4; i++)
        -:  833:	{
        -:  834:	  drawCard(currentPlayer, state);
        -:  835:	}
        -:  836:			
        -:  837:      //+1 Buy
        -:  838:      state->numBuys++;
        -:  839:			
        -:  840:      //Each other player draws a card
        -:  841:      for (i = 0; i < state->numPlayers; i++)
        -:  842:	{
        -:  843:	  if ( i != currentPlayer )
        -:  844:	    {
        -:  845:	      drawCard(i, state);
        -:  846:	    }
        -:  847:	}
        -:  848:			
        -:  849:      //put played card in played card pile
        -:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:			
        -:  852:      return 0; */
        -:  853:	  
    #####:  854:		return council_roomfunc(currentPlayer, state, handPos);
        -:  855:			
        -:  856:    case feast:
        -:  857:      //gain card with cost up to 5
        -:  858:      //Backup hand
    #####:  859:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  860:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  861:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  862:      }
        -:  863:      //Backup hand
        -:  864:
        -:  865:      //Update Coins for Buy
    #####:  866:      updateCoins(currentPlayer, state, 5);
    #####:  867:      x = 1;//Condition to loop on
    #####:  868:      while( x == 1) {//Buy one card
    #####:  869:	if (supplyCount(choice1, state) <= 0){
        -:  870:	  if (DEBUG)
        -:  871:	    printf("None of that card left, sorry!\n");
        -:  872:
        -:  873:	  if (DEBUG){
        -:  874:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  875:	  }
        -:  876:	}
    #####:  877:	else if (state->coins < getCost(choice1)){
    #####:  878:	  printf("That card is too expensive!\n");
        -:  879:
        -:  880:	  if (DEBUG){
        -:  881:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  882:	  }
        -:  883:	}
        -:  884:	else{
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  888:	  }
        -:  889:
    #####:  890:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  891:	  x = 0;//No more buying cards
        -:  892:
        -:  893:	  if (DEBUG){
        -:  894:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  895:	  }
        -:  896:
        -:  897:	}
        -:  898:      }     
        -:  899:
        -:  900:      //Reset Hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	state->hand[currentPlayer][i] = temphand[i];
    #####:  903:	temphand[i] = -1;
        -:  904:      }
        -:  905:      //Reset Hand
        -:  906:      			
    #####:  907:      return 0;
        -:  908:			
        -:  909:    case gardens:
    #####:  910:      return -1;
        -:  911:			
        -:  912:    case mine:
        -:  913:    /*  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
        -:  915:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  916:	{
        -:  917:	  return -1;
        -:  918:	}
        -:  919:		
        -:  920:      if (choice2 > treasure_map || choice2 < curse)
        -:  921:	{
        -:  922:	  return -1;
        -:  923:	}
        -:  924:
        -:  925:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  926:	{
        -:  927:	  return -1;
        -:  928:	}
        -:  929:
        -:  930:      gainCard(choice2, state, 2, currentPlayer);
        -:  931:
        -:  932:      //discard card from hand
        -:  933:      discardCard(handPos, currentPlayer, state, 0);
        -:  934:
        -:  935:      //discard trashed card
        -:  936:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  937:	{
        -:  938:	  if (state->hand[currentPlayer][i] == j)
        -:  939:	    {
        -:  940:	      discardCard(i, currentPlayer, state, 0);			
        -:  941:	      break;
        -:  942:	    }
        -:  943:	}
        -:  944:			
        -:  945:      return 0; */
        -:  946:	  
      463:  947:		return minefunc(state, currentPlayer, choice1, choice2, handPos);
        -:  948:			
        -:  949:    case remodel:
    #####:  950:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  951:
    #####:  952:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  953:	{
    #####:  954:	  return -1;
        -:  955:	}
        -:  956:
    #####:  957:      gainCard(choice2, state, 0, currentPlayer);
        -:  958:
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
        -:  961:
        -:  962:      //discard trashed card
    #####:  963:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  964:	{
    #####:  965:	  if (state->hand[currentPlayer][i] == j)
        -:  966:	    {
    #####:  967:	      discardCard(i, currentPlayer, state, 0);			
    #####:  968:	      break;
        -:  969:	    }
        -:  970:	}
        -:  971:
        -:  972:
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case smithy:
        -:  976:      //+3 Cards
        -:  977:    /*  for (i = 0; i < 3; i++)
        -:  978:	{
        -:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:			
        -:  982:      //discard card from hand
        -:  983:      discardCard(handPos, currentPlayer, state, 0);
        -:  984:      return 0; */
        -:  985:	  
        9:  986:		return smithyfunc(currentPlayer, state, handPos);
        -:  987:		
        -:  988:    case village:
        -:  989:    /*  //+1 Card
        -:  990:      drawCard(currentPlayer, state);
        -:  991:			
        -:  992:      //+2 Actions
        -:  993:      state->numActions = state->numActions + 2;
        -:  994:			
        -:  995:      //discard played card from hand
        -:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:      return 0; */
        -:  998:	  
        9:  999:		return villagefunc(currentPlayer, state, handPos);
        -: 1000:		
        -: 1001:    case baron:
    #####: 1002:		state->numBuys++;//Increase buys by 1!
    #####: 1003:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1004:			int p = 0;//Iterator for hand!
    #####: 1005:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1006:			while(card_not_discarded){
    #####: 1007:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1008:				state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1009:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1010:				state->discardCount[currentPlayer]++;
    #####: 1011:				for (;p < state->handCount[currentPlayer]; p++){
    #####: 1012:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1013:				}
    #####: 1014:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1015:				state->handCount[currentPlayer]--;
    #####: 1016:				card_not_discarded = 0;//Exit the loop
        -: 1017:			}
    #####: 1018:			else if (p > state->handCount[currentPlayer]){
        -: 1019:				if(DEBUG) {
        -: 1020:					printf("No estate cards in your hand, invalid choice\n");
        -: 1021:					printf("Must gain an estate if there are any\n");
        -: 1022:				}
    #####: 1023:				if (supplyCount(estate, state) > 0){
    #####: 1024:					gainCard(estate, state, 0, currentPlayer);
    #####: 1025:					state->supplyCount[estate]--;//Decrement estates
    #####: 1026:					if (supplyCount(estate, state) == 0){
    #####: 1027:						isGameOver(state);
        -: 1028:					}
        -: 1029:				}
    #####: 1030:				card_not_discarded = 0;//Exit the loop
        -: 1031:			}
        -: 1032:			    
        -: 1033:			else{
    #####: 1034:				p++;//Next card
        -: 1035:			}
        -: 1036:			}
        -: 1037:		}
        -: 1038:			    
        -: 1039:		else{
    #####: 1040:			if (supplyCount(estate, state) > 0){
    #####: 1041:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1042:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1043:				if (supplyCount(estate, state) == 0){
    #####: 1044:					isGameOver(state);
        -: 1045:				}
        -: 1046:			}
        -: 1047:		}
        -: 1048:	    
        -: 1049:      
    #####: 1050:		return 0;
        -: 1051:		
        -: 1052:    case great_hall:
        -: 1053:      //+1 Card
    #####: 1054:      drawCard(currentPlayer, state);
        -: 1055:			
        -: 1056:      //+1 Actions
    #####: 1057:      state->numActions++;
        -: 1058:			
        -: 1059:      //discard card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case minion:
        -: 1064:      //+1 action
    #####: 1065:      state->numActions++;
        -: 1066:			
        -: 1067:      //discard card from hand
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
        -: 1069:			
    #####: 1070:      if (choice1)		//+2 coins
        -: 1071:	{
    #####: 1072:	  state->coins = state->coins + 2;
        -: 1073:	}
        -: 1074:			
    #####: 1075:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1076:	{
        -: 1077:	  //discard hand
    #####: 1078:	  while(numHandCards(state) > 0)
        -: 1079:	    {
    #####: 1080:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1081:	    }
        -: 1082:				
        -: 1083:	  //draw 4
    #####: 1084:	  for (i = 0; i < 4; i++)
        -: 1085:	    {
    #####: 1086:	      drawCard(currentPlayer, state);
        -: 1087:	    }
        -: 1088:				
        -: 1089:	  //other players discard hand and redraw if hand size > 4
    #####: 1090:	  for (i = 0; i < state->numPlayers; i++)
        -: 1091:	    {
    #####: 1092:	      if (i != currentPlayer)
        -: 1093:		{
    #####: 1094:		  if ( state->handCount[i] > 4 )
        -: 1095:		    {
        -: 1096:		      //discard hand
    #####: 1097:		      while( state->handCount[i] > 0 )
        -: 1098:			{
    #####: 1099:			  discardCard(handPos, i, state, 0);
        -: 1100:			}
        -: 1101:							
        -: 1102:		      //draw 4
    #####: 1103:		      for (j = 0; j < 4; j++)
        -: 1104:			{
    #####: 1105:			  drawCard(i, state);
        -: 1106:			}
        -: 1107:		    }
        -: 1108:		}
        -: 1109:	    }
        -: 1110:				
        -: 1111:	}
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case steward:
    #####: 1115:      if (choice1 == 1)
        -: 1116:	{
        -: 1117:	  //+2 cards
    #####: 1118:	  drawCard(currentPlayer, state);
    #####: 1119:	  drawCard(currentPlayer, state);
        -: 1120:	}
    #####: 1121:      else if (choice1 == 2)
        -: 1122:	{
        -: 1123:	  //+2 coins
    #####: 1124:	  state->coins = state->coins + 2;
        -: 1125:	}
        -: 1126:      else
        -: 1127:	{
        -: 1128:	  //trash 2 cards in hand
    #####: 1129:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1130:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1131:	}
        -: 1132:			
        -: 1133:      //discard card from hand
    #####: 1134:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case tribute:
    #####: 1138:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1139:	if (state->deckCount[nextPlayer] > 0){
    #####: 1140:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1141:	  state->deckCount[nextPlayer]--;
        -: 1142:	}
    #####: 1143:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1144:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1145:	  state->discardCount[nextPlayer]--;
        -: 1146:	}
        -: 1147:	else{
        -: 1148:	  //No Card to Reveal
        -: 1149:	  if (DEBUG){
        -: 1150:	    printf("No cards to reveal\n");
        -: 1151:	  }
        -: 1152:	}
        -: 1153:      }
        -: 1154:	    
        -: 1155:      else{
    #####: 1156:	if (state->deckCount[nextPlayer] == 0){
    #####: 1157:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1158:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1159:	    state->deckCount[nextPlayer]++;
    #####: 1160:	    state->discard[nextPlayer][i] = -1;
    #####: 1161:	    state->discardCount[nextPlayer]--;
        -: 1162:	  }
        -: 1163:			    
    #####: 1164:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1165:	} 
    #####: 1166:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1167:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1168:	state->deckCount[nextPlayer]--;
    #####: 1169:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1171:	state->deckCount[nextPlayer]--;
        -: 1172:      }    
        -: 1173:		       
    #####: 1174:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1175:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1176:	state->playedCardCount++;
    #####: 1177:	tributeRevealedCards[1] = -1;
        -: 1178:      }
        -: 1179:
    #####: 1180:      for (i = 0; i <= 2; i ++){
    #####: 1181:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1182:	  state->coins += 2;
        -: 1183:	}
        -: 1184:		    
    #####: 1185:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1186:	  drawCard(currentPlayer, state);
    #####: 1187:	  drawCard(currentPlayer, state);
        -: 1188:	}
        -: 1189:	else{//Action Card
    #####: 1190:	  state->numActions = state->numActions + 2;
        -: 1191:	}
        -: 1192:      }
        -: 1193:	    
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case ambassador:
    #####: 1197:      j = 0;		//used to check if player has enough cards to discard
        -: 1198:
    #####: 1199:      if (choice2 > 2 || choice2 < 0)
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
    #####: 1204:      if (choice1 == handPos)
        -: 1205:	{
    #####: 1206:	  return -1;
        -: 1207:	}
        -: 1208:
    #####: 1209:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1210:	{
    #####: 1211:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1212:	    {
    #####: 1213:	      j++;
        -: 1214:	    }
        -: 1215:	}
    #####: 1216:      if (j < choice2)
        -: 1217:	{
    #####: 1218:	  return -1;				
        -: 1219:	}
        -: 1220:
        -: 1221:      if (DEBUG) 
        -: 1222:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1223:
        -: 1224:      //increase supply count for choosen card by amount being discarded
    #####: 1225:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1226:			
        -: 1227:      //each other player gains a copy of revealed card
    #####: 1228:      for (i = 0; i < state->numPlayers; i++)
        -: 1229:	{
    #####: 1230:	  if (i != currentPlayer)
        -: 1231:	    {
    #####: 1232:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1233:	    }
        -: 1234:	}
        -: 1235:
        -: 1236:      //discard played card from hand
    #####: 1237:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1238:
        -: 1239:      //trash copies of cards returned to supply
    #####: 1240:      for (j = 0; j < choice2; j++)
        -: 1241:	{
    #####: 1242:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1243:	    {
    #####: 1244:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1245:		{
    #####: 1246:		  discardCard(i, currentPlayer, state, 1);
    #####: 1247:		  break;
        -: 1248:		}
        -: 1249:	    }
        -: 1250:	}			
        -: 1251:
    #####: 1252:      return 0;
        -: 1253:		
        -: 1254:    case cutpurse:
        -: 1255:
    #####: 1256:      updateCoins(currentPlayer, state, 2);
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
        -: 1260:	    {
    #####: 1261:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1262:		{
    #####: 1263:		  if (state->hand[i][j] == copper)
        -: 1264:		    {
    #####: 1265:		      discardCard(j, i, state, 0);
    #####: 1266:		      break;
        -: 1267:		    }
    #####: 1268:		  if (j == state->handCount[i])
        -: 1269:		    {
    #####: 1270:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1271:			{
        -: 1272:			  if (DEBUG)
        -: 1273:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1274:			}	
    #####: 1275:		      break;
        -: 1276:		    }		
        -: 1277:		}
        -: 1278:					
        -: 1279:	    }
        -: 1280:				
        -: 1281:	}				
        -: 1282:
        -: 1283:      //discard played card from hand
    #####: 1284:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1285:
    #####: 1286:      return 0;
        -: 1287:
        -: 1288:		
        -: 1289:    case embargo: 
        -: 1290:      //+2 Coins
    #####: 1291:      state->coins = state->coins + 2;
        -: 1292:			
        -: 1293:      //see if selected pile is in play
    #####: 1294:      if ( state->supplyCount[choice1] == -1 )
        -: 1295:	{
    #####: 1296:	  return -1;
        -: 1297:	}
        -: 1298:			
        -: 1299:      //add embargo token to selected supply pile
    #####: 1300:      state->embargoTokens[choice1]++;
        -: 1301:			
        -: 1302:      //trash card
    #####: 1303:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1304:      return 0;
        -: 1305:		
        -: 1306:    case outpost:
        -: 1307:      //set outpost flag
    #####: 1308:      state->outpostPlayed++;
        -: 1309:			
        -: 1310:      //discard card
    #####: 1311:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1312:      return 0;
        -: 1313:		
        -: 1314:    case salvager:
        -: 1315:      //+1 buy
    #####: 1316:      state->numBuys++;
        -: 1317:			
    #####: 1318:      if (choice1)
        -: 1319:	{
        -: 1320:	  //gain coins equal to trashed card
    #####: 1321:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1322:	  //trash card
    #####: 1323:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1324:	}
        -: 1325:			
        -: 1326:      //discard card
    #####: 1327:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1328:      return 0;
        -: 1329:		
        -: 1330:    case sea_hag:
    #####: 1331:      for (i = 0; i < state->numPlayers; i++){
    #####: 1332:	if (i != currentPlayer){
    #####: 1333:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1334:	  state->discardCount[i]++;
    #####: 1335:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1336:	}
        -: 1337:      }
    #####: 1338:      return 0;
        -: 1339:		
        -: 1340:    case treasure_map:
        -: 1341:      //search hand for another treasure_map
    #####: 1342:      index = -1;
    #####: 1343:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1344:	{
    #####: 1345:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1346:	    {
    #####: 1347:	      index = i;
    #####: 1348:	      break;
        -: 1349:	    }
        -: 1350:	}
    #####: 1351:      if (index > -1)
        -: 1352:	{
        -: 1353:	  //trash both treasure cards
    #####: 1354:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1355:	  discardCard(index, currentPlayer, state, 1);
        -: 1356:
        -: 1357:	  //gain 4 Gold cards
    #####: 1358:	  for (i = 0; i < 4; i++)
        -: 1359:	    {
    #####: 1360:	      gainCard(gold, state, 1, currentPlayer);
        -: 1361:	    }
        -: 1362:				
        -: 1363:	  //return success
    #####: 1364:	  return 1;
        -: 1365:	}
        -: 1366:			
        -: 1367:      //no second treasure_map found in hand
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
    #####: 1371:  return -1;
        -: 1372:}
        -: 1373:
      461: 1374:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1375:{
        -: 1376:	
        -: 1377:  //if card is not trashed, added to Played pile 
      461: 1378:  if (trashFlag < 1)
        -: 1379:    {
        -: 1380:      //add card to played pile
      460: 1381:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      460: 1382:      state->playedCardCount++;
        -: 1383:    }
        -: 1384:	
        -: 1385:  //set played card to -1
      461: 1386:  state->hand[currentPlayer][handPos] = -1;
        -: 1387:	
        -: 1388:  //remove card from player's hand
      461: 1389:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1390:    {
        -: 1391:      //reduce number of cards in hand
       11: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
      450: 1394:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1395:    {
        -: 1396:      //reduce number of cards in hand
    #####: 1397:      state->handCount[currentPlayer]--;
        -: 1398:    }
        -: 1399:  else 	
        -: 1400:    {
        -: 1401:      //replace discarded card with last card in hand
      450: 1402:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1403:      //set last card to -1
      450: 1404:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1405:      //reduce number of cards in hand
      450: 1406:      state->handCount[currentPlayer]--;
        -: 1407:    }
        -: 1408:	
      461: 1409:  return 0;
        -: 1410:}
        -: 1411:
      713: 1412:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1413:{
        -: 1414:  //Note: supplyPos is enum of choosen card
        -: 1415:	
        -: 1416:  //check if supply pile is empty (0) or card is not used in game (-1)
      713: 1417:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1418:    {
       74: 1419:      return -1;
        -: 1420:    }
        -: 1421:	
        -: 1422:  //added card for [whoseTurn] current player:
        -: 1423:  // toFlag = 0 : add to discard
        -: 1424:  // toFlag = 1 : add to deck
        -: 1425:  // toFlag = 2 : add to hand
        -: 1426:
      639: 1427:  if (toFlag == 1)
        -: 1428:    {
      162: 1429:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      162: 1430:      state->deckCount[player]++;
        -: 1431:    }
      477: 1432:  else if (toFlag == 2)
        -: 1433:    {
      315: 1434:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      315: 1435:      state->handCount[player]++;
        -: 1436:    }
        -: 1437:  else
        -: 1438:    {
      162: 1439:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      162: 1440:      state->discardCount[player]++;
        -: 1441:    }
        -: 1442:	
        -: 1443:  //decrease number in supply pile
      639: 1444:  state->supplyCount[supplyPos]--;
        -: 1445:	 
      639: 1446:  return 0;
        -: 1447:}
        -: 1448:
      189: 1449:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1450:{
        -: 1451:  int i;
        -: 1452:	
        -: 1453:  //reset coin count
      189: 1454:  state->coins = 0;
        -: 1455:
        -: 1456:  //add coins for each Treasure card in player's hand
     1134: 1457:  for (i = 0; i < state->handCount[player]; i++)
        -: 1458:    {
      945: 1459:      if (state->hand[player][i] == copper)
        -: 1460:	{
      756: 1461:	  state->coins += 1;
        -: 1462:	}
      189: 1463:      else if (state->hand[player][i] == silver)
        -: 1464:	{
    #####: 1465:	  state->coins += 2;
        -: 1466:	}
      189: 1467:      else if (state->hand[player][i] == gold)
        -: 1468:	{
    #####: 1469:	  state->coins += 3;
        -: 1470:	}	
        -: 1471:    }	
        -: 1472:
        -: 1473:  //add bonus
      189: 1474:  state->coins += bonus;
        -: 1475:
      189: 1476:  return 0;
        -: 1477:}
        -: 1478:
        -: 1479:
        -: 1480://end of dominion.c
