        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest1.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtestsmithy: cardtest1.c dominion.o rngs.o
        -:   11: *      gcc -o cardtestsmithy -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:// set NOISY_TEST to 0 to remove printfs from output
        -:   24:#define NOISY_TEST 1
        -:   25:
        1:   26:int main() {
        -:   27:    int ret;
        1:   28:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   29:    int seed = 15;
        -:   30:    int numPlayers, player;
        -:   31:	struct gameState G, post;
        1:   32:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   33:			sea_hag, tribute, smithy, council_room};
        -:   34:	
        1:   35:	int h[5] = {smithy, copper, copper, estate, estate};
        1:   36:	int d[5] = {copper, copper, copper, copper, copper};
        1:   37:	int expect[7] = {copper, copper, copper, estate, estate, copper, copper};
        -:   38:
        1:   39:	printf("Testing Card: Smithy\n");
        -:   40:
        4:   41:	for (numPlayers = 2; numPlayers < 5; numPlayers++) {	//testing 2-4 player games
        3:   42:		memset(&G, 23, sizeof(struct gameState));		//clear the game
        3:   43:		memset(&post, 23, sizeof(struct gameState));	//clear the post
        -:   44:		
        -:   45:#if (NOISY_TEST == 1)			
        3:   46:		printf("Initializing Game with %d players\n", numPlayers);
        -:   47:#endif
        -:   48:
        3:   49:		initializeGame(numPlayers, k, seed, &G);
        -:   50:			
       12:   51:		for(player = 0; player < numPlayers; player++) {		//testing each player in game
        -:   52:#if (NOISY_TEST == 1)		
        9:   53:			printf("Testing Player %d\n", player);
        -:   54:#endif			
        -:   55:			//cards can be shuffled differently, so drawn cards might not be the same for each instance of the game
        -:   56:			//thus all the cards in the deck were made coppers.	
        9:   57:			memcpy(G.hand[player], h, sizeof(int) * 5); //set all cards to test hand h
        9:   58:			memcpy(G.deck[player], d, sizeof(int) * 5); //set all cards to test deck d
        9:   59:			G.deckCount[player] = 5;
        9:   60:			G.handCount[player] = 5;
        9:   61:			G.whoseTurn = player;		//smithy card expects that the player is playing it on their turn
        -:   62:			
        9:   63:			memcpy(&post, &G, sizeof(struct gameState)); //save G
        -:   64:
        9:   65:			cardEffect(smithy, choice1, choice2, choice3, &post, handpos, &bonus);
        -:   66:#if (NOISY_TEST == 1)			
        9:   67:			printf("   Checking hand count: \n");
        -:   68:#endif			
        9:   69:			G.handCount[player] += 2;		//Adds three cards and discards smithy = +2 cards in hand
        -:   70:			
        -:   71:#if (NOISY_TEST == 1)		
        9:   72:			printf("      Hand count: %d Expected: %d\n", post.handCount[player], G.handCount[player]);
        9:   73:			printf("      If this test doesn't work, then the next one won't either\n");
        9:   74:			printf("   Checking correct card was discarded: \n");
        -:   75:#endif
        -:   76:			
        9:   77:			ret = memcmp(post.hand[player], expect, sizeof(int) * post.handCount[player]);
        -:   78:			
        -:   79:#if (NOISY_TEST == 1)		
        9:   80:			printf("      Comparison: %d Expected: 0\n", ret);
        -:   81:#endif
        -:   82:
        -:   83:		}
        -:   84:	}
        1:   85:		printf("All tests Conducted!\n");
        -:   86:
        1:   87:	return 0;
        -:   88:}
        -:   89:
        -:   90:
